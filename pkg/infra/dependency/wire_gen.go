// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependency

import (
	"github.com/Medzoner/medzoner-go/pkg/application/command"
	"github.com/Medzoner/medzoner-go/pkg/application/event"
	"github.com/Medzoner/medzoner-go/pkg/application/query"
	"github.com/Medzoner/medzoner-go/pkg/application/service/mailer"
	repository2 "github.com/Medzoner/medzoner-go/pkg/domain/repository"
	"github.com/Medzoner/medzoner-go/pkg/infra/captcha"
	"github.com/Medzoner/medzoner-go/pkg/infra/config"
	"github.com/Medzoner/medzoner-go/pkg/infra/database"
	"github.com/Medzoner/medzoner-go/pkg/infra/middleware"
	"github.com/Medzoner/medzoner-go/pkg/infra/notification"
	"github.com/Medzoner/medzoner-go/pkg/infra/repository"
	"github.com/Medzoner/medzoner-go/pkg/infra/router"
	"github.com/Medzoner/medzoner-go/pkg/infra/server"
	"github.com/Medzoner/medzoner-go/pkg/infra/telemetry"
	"github.com/Medzoner/medzoner-go/pkg/infra/validation"
	"github.com/Medzoner/medzoner-go/pkg/ui/http/handler"
	"github.com/Medzoner/medzoner-go/pkg/ui/http/templater"
	"github.com/Medzoner/medzoner-go/test"
	mocks2 "github.com/Medzoner/medzoner-go/test/mocks"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitDbMigration() (database.DbMigration, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return database.DbMigration{}, err
	}
	dbSQLInstance := database.NewDbSQLInstance(configConfig)
	dbMigration := database.NewDbMigration(dbSQLInstance, configConfig)
	return dbMigration, nil
}

func InitServer() (*server.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	templateHTML := templater.NewTemplateHTML(configConfig)
	httpTelemetry, err := telemetry.NewHttpTelemetry(configConfig)
	if err != nil {
		return nil, err
	}
	notFoundHandler := handler.NewNotFoundHandler(templateHTML, httpTelemetry)
	technoJSONRepository := repository.NewTechnoJSONRepository(httpTelemetry, configConfig)
	listTechnoQueryHandler := query.NewListTechnoQueryHandler(technoJSONRepository, httpTelemetry)
	dbSQLInstance := database.NewDbSQLInstance(configConfig)
	mysqlContactRepository := repository.NewMysqlContactRepository(dbSQLInstance, httpTelemetry)
	mailerSMTP := notification.NewMailerSMTP(configConfig, httpTelemetry)
	contactCreatedEventHandler := event.NewContactCreatedEventHandler(mailerSMTP, httpTelemetry)
	createContactCommandHandler := command.NewCreateContactCommandHandler(mysqlContactRepository, contactCreatedEventHandler, httpTelemetry)
	validatorAdapter := validation.NewValidatorAdapter()
	recaptchaAdapter := captcha.NewRecaptchaAdapter()
	indexHandler := handler.NewIndexHandler(templateHTML, listTechnoQueryHandler, configConfig, createContactCommandHandler, validatorAdapter, recaptchaAdapter, httpTelemetry)
	apiMiddleware := middleware.NewAPIMiddleware(httpTelemetry)
	muxRouterAdapter := router.NewMuxRouterAdapter(notFoundHandler, indexHandler, apiMiddleware)
	serverServer := server.NewServer(configConfig, muxRouterAdapter, httpTelemetry)
	return serverServer, nil
}

func InitServerTest(mocks2 *mocks.Mocks) (*server.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	templateHTML := templater.NewTemplateHTML(configConfig)
	mockTelemeter := mocks2.HttpTelemetry
	notFoundHandler := handler.NewNotFoundHandler(templateHTML, mockTelemeter)
	mockTechnoRepository := mocks2.TechnoRepository
	listTechnoQueryHandler := query.NewListTechnoQueryHandler(mockTechnoRepository, mockTelemeter)
	mockContactRepository := mocks2.ContactRepository
	mockMailer := mocks2.Mailer
	contactCreatedEventHandler := event.NewContactCreatedEventHandler(mockMailer, mockTelemeter)
	createContactCommandHandler := command.NewCreateContactCommandHandler(mockContactRepository, contactCreatedEventHandler, mockTelemeter)
	validatorAdapter := validation.NewValidatorAdapter()
	recaptchaAdapter := captcha.NewRecaptchaAdapter()
	indexHandler := handler.NewIndexHandler(templateHTML, listTechnoQueryHandler, configConfig, createContactCommandHandler, validatorAdapter, recaptchaAdapter, mockTelemeter)
	apiMiddleware := middleware.NewAPIMiddleware(mockTelemeter)
	muxRouterAdapter := router.NewMuxRouterAdapter(notFoundHandler, indexHandler, apiMiddleware)
	serverServer := server.NewServer(configConfig, muxRouterAdapter, mockTelemeter)
	return serverServer, nil
}

// wire.go:

var (
	InfraWiring      = wire.NewSet(config.NewConfig, router.NewMuxRouterAdapter, server.NewServer, templater.NewTemplateHTML, validation.NewValidatorAdapter, captcha.NewRecaptchaAdapter, middleware.NewAPIMiddleware, wire.Bind(new(router.IRouter), new(*router.MuxRouterAdapter)), wire.Bind(new(server.IServer), new(*server.Server)), wire.Bind(new(templater.Templater), new(*templater.TemplateHTML)), wire.Bind(new(validation.MzValidator), new(*validation.ValidatorAdapter)), wire.Bind(new(captcha.Captcher), new(*captcha.RecaptchaAdapter)))
	DbWiring         = wire.NewSet(database.NewDbSQLInstance, wire.Bind(new(database.DbInstantiator), new(*database.DbSQLInstance)))
	TracerWiring     = wire.NewSet(telemetry.NewHttpTelemetry, wire.Bind(new(telemetry.Telemeter), new(*telemetry.HttpTelemetry)))
	TracerMockWiring = wire.NewSet(wire.FieldsOf(
		new(*mocks.Mocks),
		"HttpTelemetry",
	), wire.Bind(new(telemetry.Telemeter), new(*mocks2.MockTelemeter)),
	)
	MailerWiring     = wire.NewSet(notification.NewMailerSMTP, wire.Bind(new(mailer.Mailer), new(*notification.MailerSMTP)))
	MailerMockWiring = wire.NewSet(wire.FieldsOf(
		new(*mocks.Mocks),
		"Mailer",
	), wire.Bind(new(mailer.Mailer), new(*mocks2.MockMailer)),
	)
	RepositoryWiring     = wire.NewSet(repository.NewTechnoJSONRepository, repository.NewMysqlContactRepository, wire.Bind(new(repository2.TechnoRepository), new(*repository.TechnoJSONRepository)), wire.Bind(new(repository2.ContactRepository), new(*repository.MysqlContactRepository)))
	RepositoryMockWiring = wire.NewSet(wire.FieldsOf(
		new(*mocks.Mocks),
		"TechnoRepository",
	), wire.Bind(new(repository2.TechnoRepository), new(*mocks2.MockTechnoRepository)), wire.FieldsOf(
		new(*mocks.Mocks),
		"ContactRepository",
	), wire.Bind(new(repository2.ContactRepository), new(*mocks2.MockContactRepository)),
	)
	AppWiring = wire.NewSet(event.NewContactCreatedEventHandler, command.NewCreateContactCommandHandler, query.NewListTechnoQueryHandler, wire.Bind(new(event.IEventHandler), new(*event.ContactCreatedEventHandler)))
	UiWiring  = wire.NewSet(handler.NewIndexHandler, handler.NewNotFoundHandler)
)
