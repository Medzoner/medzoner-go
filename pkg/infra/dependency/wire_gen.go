// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependency

import (
	"github.com/Medzoner/medzoner-go/pkg/app"
	"github.com/Medzoner/medzoner-go/pkg/application/command"
	"github.com/Medzoner/medzoner-go/pkg/application/event"
	"github.com/Medzoner/medzoner-go/pkg/application/query"
	"github.com/Medzoner/medzoner-go/pkg/application/service/mailer"
	repository2 "github.com/Medzoner/medzoner-go/pkg/domain/repository"
	"github.com/Medzoner/medzoner-go/pkg/infra/captcha"
	"github.com/Medzoner/medzoner-go/pkg/infra/config"
	"github.com/Medzoner/medzoner-go/pkg/infra/database"
	"github.com/Medzoner/medzoner-go/pkg/infra/logger"
	"github.com/Medzoner/medzoner-go/pkg/infra/mailersmtp"
	"github.com/Medzoner/medzoner-go/pkg/infra/path"
	"github.com/Medzoner/medzoner-go/pkg/infra/repository"
	"github.com/Medzoner/medzoner-go/pkg/infra/router"
	"github.com/Medzoner/medzoner-go/pkg/infra/server"
	"github.com/Medzoner/medzoner-go/pkg/infra/session"
	"github.com/Medzoner/medzoner-go/pkg/infra/tracer"
	"github.com/Medzoner/medzoner-go/pkg/infra/validation"
	"github.com/Medzoner/medzoner-go/pkg/ui/http/handler"
	"github.com/Medzoner/medzoner-go/pkg/ui/http/templater"
	"github.com/Medzoner/medzoner-go/pkg/ui/http/web"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() *app.App {
	rootPath := path.NewRootPath()
	useSugar := logger.NewUseSugar()
	zapLoggerAdapter := logger.NewLoggerAdapter(rootPath, useSugar)
	muxRouterAdapter := router.NewMuxRouterAdapter()
	configConfig := config.NewConfig()
	serverServer := server.NewServer(configConfig, muxRouterAdapter)
	templateHTML := templater.NewTemplateHTML(rootPath)
	httpTracer := tracer.NewHttpTracer()
	notFoundHandler := handler.NewNotFoundHandler(templateHTML, httpTracer)
	technoJSONRepository := repository.NewTechnoJSONRepository(zapLoggerAdapter, rootPath)
	listTechnoQueryHandler := query.NewListTechnoQueryHandler(technoJSONRepository)
	dbSQLInstance := database.NewDbSQLInstance(configConfig)
	mysqlContactRepository := repository.NewMysqlContactRepository(dbSQLInstance, zapLoggerAdapter)
	mailerSMTP := mailersmtp.NewMailerSMTP(configConfig, rootPath)
	contactCreatedEventHandler := event.NewContactCreatedEventHandler(mailerSMTP, zapLoggerAdapter)
	createContactCommandHandler := command.NewCreateContactCommandHandler(mysqlContactRepository, contactCreatedEventHandler, zapLoggerAdapter)
	sessionKey := session.NewSessionKey()
	sessionerAdapter := session.NewSessionerAdapter(sessionKey)
	validatorAdapter := validation.NewValidatorAdapter()
	recaptchaAdapter := captcha.NewRecaptchaAdapter()
	indexHandler := handler.NewIndexHandler(templateHTML, listTechnoQueryHandler, configConfig, createContactCommandHandler, sessionerAdapter, validatorAdapter, recaptchaAdapter, httpTracer)
	technoHandler := handler.NewTechnoHandler(templateHTML, listTechnoQueryHandler, httpTracer)
	webWeb := web.NewWeb(zapLoggerAdapter, muxRouterAdapter, serverServer, notFoundHandler, indexHandler, technoHandler, configConfig)
	dbMigration := database.NewDbMigration(dbSQLInstance, rootPath)
	appApp := app.NewApp(rootPath, webWeb, dbSQLInstance, configConfig, dbMigration)
	return appApp
}

// wire.go:

var (
	InfraWiring = wire.NewSet(config.NewConfig, path.NewRootPath, logger.NewUseSugar, logger.NewLoggerAdapter, router.NewMuxRouterAdapter, server.NewServer, templater.NewTemplateHTML, session.NewSessionKey, session.NewSessionerAdapter, validation.NewValidatorAdapter, captcha.NewRecaptchaAdapter, tracer.NewHttpTracer, database.NewDbSQLInstance, database.NewDbMigration, mailersmtp.NewMailerSMTP, repository.NewTechnoJSONRepository, repository.NewMysqlContactRepository, wire.Bind(new(config.IConfig), new(*config.Config)), wire.Bind(new(logger.ILogger), new(*logger.ZapLoggerAdapter)), wire.Bind(new(router.IRouter), new(*router.MuxRouterAdapter)), wire.Bind(new(server.IServer), new(*server.Server)), wire.Bind(new(templater.Templater), new(*templater.TemplateHTML)), wire.Bind(new(session.Sessioner), new(*session.SessionerAdapter)), wire.Bind(new(validation.MzValidator), new(*validation.ValidatorAdapter)), wire.Bind(new(captcha.Captcher), new(*captcha.RecaptchaAdapter)), wire.Bind(new(tracer.Tracer), new(*tracer.HttpTracer)), wire.Bind(new(database.IDbInstance), new(*database.DbSQLInstance)), wire.Bind(new(mailer.Mailer), new(*mailersmtp.MailerSMTP)), wire.Bind(new(repository2.TechnoRepository), new(*repository.TechnoJSONRepository)), wire.Bind(new(repository2.ContactRepository), new(*repository.MysqlContactRepository)))
	AppWiring   = wire.NewSet(event.NewContactCreatedEventHandler, wire.Bind(new(event.IEventHandler), new(*event.ContactCreatedEventHandler)), command.NewCreateContactCommandHandler, query.NewListTechnoQueryHandler)
	UiWiring    = wire.NewSet(handler.NewIndexHandler, handler.NewTechnoHandler, handler.NewNotFoundHandler)
	CoreWiring  = wire.NewSet(web.NewWeb, wire.Bind(new(web.IWeb), new(*web.Web)))
)
