// Code generated by MockGen. DO NOT EDIT.
// Source: ./techno_repository.go

// Package domainRepositoryMock is a generated GoMock package.
package domainRepositoryMock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTechnoRepository is a mock of TechnoRepository interface.
type MockTechnoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTechnoRepositoryMockRecorder
}

// MockTechnoRepositoryMockRecorder is the mock recorder for MockTechnoRepository.
type MockTechnoRepositoryMockRecorder struct {
	mock *MockTechnoRepository
}

// NewMockTechnoRepository creates a new mock instance.
func NewMockTechnoRepository(ctrl *gomock.Controller) *MockTechnoRepository {
	mock := &MockTechnoRepository{ctrl: ctrl}
	mock.recorder = &MockTechnoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTechnoRepository) EXPECT() *MockTechnoRepositoryMockRecorder {
	return m.recorder
}

// FetchStack mocks base method.
func (m *MockTechnoRepository) FetchStack() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStack")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// FetchStack indicates an expected call of FetchStack.
func (mr *MockTechnoRepositoryMockRecorder) FetchStack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStack", reflect.TypeOf((*MockTechnoRepository)(nil).FetchStack))
}
