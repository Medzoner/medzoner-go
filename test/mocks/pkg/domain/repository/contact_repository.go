// Code generated by MockGen. DO NOT EDIT.
// Source: ./contact_repository.go

// Package contactMock is a generated GoMock package.
package contactMock

import (
	context "context"
	"github.com/Medzoner/medzoner-go/pkg/infra/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContactRepository is a mock of ContactRepository interface.
type MockContactRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactRepositoryMockRecorder
}

// MockContactRepositoryMockRecorder is the mock recorder for MockContactRepository.
type MockContactRepositoryMockRecorder struct {
	mock *MockContactRepository
}

// NewMockContactRepository creates a new mock instance.
func NewMockContactRepository(ctrl *gomock.Controller) *MockContactRepository {
	mock := &MockContactRepository{ctrl: ctrl}
	mock.recorder = &MockContactRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactRepository) EXPECT() *MockContactRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockContactRepository) Save(ctx context.Context, contact entity.Contact) error {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", ctx, contact)
	return nil
}

// Save indicates an expected call of Save.
func (mr *MockContactRepositoryMockRecorder) Save(ctx, contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockContactRepository)(nil).Save), ctx, contact)
}
