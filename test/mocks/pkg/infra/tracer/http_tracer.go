// Code generated by MockGen. DO NOT EDIT.
// Source: ./http_tracer.go

// Package tracerMock is a generated GoMock package.
package tracerMock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
	trace "go.opentelemetry.io/otel/trace"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Int64Counter mocks base method.
func (m *MockTracer) Int64Counter(name string, options ...metric.Int64CounterOption) (metric.Int64Counter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Int64Counter", varargs...)
	ret0, _ := ret[0].(metric.Int64Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int64Counter indicates an expected call of Int64Counter.
func (mr *MockTracerMockRecorder) Int64Counter(name interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int64Counter", reflect.TypeOf((*MockTracer)(nil).Int64Counter), varargs...)
}

// ShutdownMeter mocks base method.
func (m *MockTracer) ShutdownMeter(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownMeter", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownMeter indicates an expected call of ShutdownMeter.
func (mr *MockTracerMockRecorder) ShutdownMeter(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownMeter", reflect.TypeOf((*MockTracer)(nil).ShutdownMeter), ctx)
}

// ShutdownTracer mocks base method.
func (m *MockTracer) ShutdownTracer(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownTracer", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownTracer indicates an expected call of ShutdownTracer.
func (mr *MockTracerMockRecorder) ShutdownTracer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownTracer", reflect.TypeOf((*MockTracer)(nil).ShutdownTracer), ctx)
}

// Start mocks base method.
func (m *MockTracer) Start(ctx context.Context, spanName string, opts ...trace.SpanStartOption) (context.Context, trace.Span) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, spanName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(trace.Span)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockTracerMockRecorder) Start(ctx, spanName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, spanName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTracer)(nil).Start), varargs...)
}

// WriteLog mocks base method.
func (m *MockTracer) WriteLog(ctx context.Context, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteLog", ctx, message)
}

// WriteLog indicates an expected call of WriteLog.
func (mr *MockTracerMockRecorder) WriteLog(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLog", reflect.TypeOf((*MockTracer)(nil).WriteLog), ctx, message)
}
