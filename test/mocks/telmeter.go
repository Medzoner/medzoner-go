// Code generated by MockGen. DO NOT EDIT.
// Source: ./telemetry.go

// Package tracerMock is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	trace "go.opentelemetry.io/otel/trace"
)

// MockTelemeter is a mock of Telemeter interface.
type MockTelemeter struct {
	ctrl     *gomock.Controller
	recorder *MockTelemeterMockRecorder
}

// MockTelemeterMockRecorder is the mock recorder for MockTelemeter.
type MockTelemeterMockRecorder struct {
	mock *MockTelemeter
}

// NewMockTelemeter creates a new mock instance.
func NewMockTelemeter(ctrl *gomock.Controller) *MockTelemeter {
	mock := &MockTelemeter{ctrl: ctrl}
	mock.recorder = &MockTelemeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemeter) EXPECT() *MockTelemeterMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockTelemeter) Error(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockTelemeterMockRecorder) Error(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTelemeter)(nil).Error), varargs...)
}

// ErrorSpan mocks base method.
func (m *MockTelemeter) ErrorSpan(span trace.Span, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorSpan", span, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// ErrorSpan indicates an expected call of ErrorSpan.
func (mr *MockTelemeterMockRecorder) ErrorSpan(span, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorSpan", reflect.TypeOf((*MockTelemeter)(nil).ErrorSpan), span, err)
}

// Log mocks base method.
func (m *MockTelemeter) Log(ctx context.Context, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", ctx, msg)
}

// Log indicates an expected call of Log.
func (mr *MockTelemeterMockRecorder) Log(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockTelemeter)(nil).Log), ctx, msg)
}

// ShutdownLogger mocks base method.
func (m *MockTelemeter) ShutdownLogger(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownLogger", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownLogger indicates an expected call of ShutdownLogger.
func (mr *MockTelemeterMockRecorder) ShutdownLogger(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownLogger", reflect.TypeOf((*MockTelemeter)(nil).ShutdownLogger), ctx)
}

// ShutdownMeter mocks base method.
func (m *MockTelemeter) ShutdownMeter(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownMeter", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownMeter indicates an expected call of ShutdownMeter.
func (mr *MockTelemeterMockRecorder) ShutdownMeter(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownMeter", reflect.TypeOf((*MockTelemeter)(nil).ShutdownMeter), ctx)
}

// ShutdownTracer mocks base method.
func (m *MockTelemeter) ShutdownTracer(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownTracer", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownTracer indicates an expected call of ShutdownTracer.
func (mr *MockTelemeterMockRecorder) ShutdownTracer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownTracer", reflect.TypeOf((*MockTelemeter)(nil).ShutdownTracer), ctx)
}

// Start mocks base method.
func (m *MockTelemeter) Start(ctx context.Context, spanName string, opts ...trace.SpanStartOption) (context.Context, trace.Span) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, spanName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(trace.Span)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockTelemeterMockRecorder) Start(ctx, spanName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, spanName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTelemeter)(nil).Start), varargs...)
}

// StartRoot mocks base method.
func (m *MockTelemeter) StartRoot(ctx context.Context, request *http.Request, spanName string) (context.Context, trace.Span) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRoot", ctx, request, spanName)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(trace.Span)
	return ret0, ret1
}

// StartRoot indicates an expected call of StartRoot.
func (mr *MockTelemeterMockRecorder) StartRoot(ctx, request, spanName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRoot", reflect.TypeOf((*MockTelemeter)(nil).StartRoot), ctx, request, spanName)
}
